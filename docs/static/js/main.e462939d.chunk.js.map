{"version":3,"sources":["components/header/index.js","components/featuredContentBlock/index.js","models/featuredContentModel.js","styles/homePage.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","FeaturedContentBlock","ctaLinks","this","props","model","cta","map","link","aria-label","text","react","style","headline","subText","class","appKitContentModel","rMockContentModel","workContentModel","teamContentModel","firstContentBlockStyle","background-color","background-image","background-repeat","background-position","width","height","color","position","top","secondContentBlockStyle","thirdContentBlockStyle","fourthContentBlockStyle","left","App","components_header","components_featuredContentBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAgBeA,0LAXX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,IAAaJ,EAAAC,EAAAC,cAAA,8BAAb,KACAF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,IAAaJ,EAAAC,EAAAC,cAAA,uBAAb,cANWG,cCqBNC,0LAlBX,IAAIC,EAAWC,KAAKC,MAAMC,MAAMC,IAAIC,IAAK,SAAEC,GACzC,OAASb,EAAAC,EAAAC,cAAA,KAAGE,KAAOS,EAAKT,KAAOU,aAAaD,EAAKE,MAAxC,IAAkDF,EAAKE,KAAvD,OAGX,OACEf,EAAAC,EAAAC,cAACc,EAAA,SAAD,KACEhB,EAAAC,EAAAC,cAAA,WAASC,UAAU,uBAAuBc,MAAOT,KAAKC,MAAMQ,OAC1DjB,EAAAC,EAAAC,cAAA,cAAOM,KAAKC,MAAMC,MAAMQ,SAAxB,KACAlB,EAAAC,EAAAC,cAAA,cAAOM,KAAKC,MAAMC,MAAMS,QAAxB,KACAnB,EAAAC,EAAAC,cAAA,OAAKkB,MAAM,OACPb,YAbqBF,cCFtBgB,EAAqB,CAChCH,SAAU,0BACVC,QAAS,yCACTR,IAAK,CAAC,CACJP,KAAM,IACNW,KAAM,kBAIGO,EAAoB,CAC/BJ,SAAU,yBACVC,QAAS,2CACTR,IAAK,CAAC,CACJP,KAAM,uCACNW,KAAM,WAIGQ,EAAmB,CAC9BL,SAAU,WACVC,QAAS,4BACTR,IAAK,CAAC,CACJP,KAAM,IACNW,KAAM,cAIGS,EAAmB,CAC9BN,SAAU,WACVC,QAAS,kCACTR,IAAK,CAAC,CACJP,KAAM,IACNW,KAAM,UC/BGU,EAAyB,CACpCC,mBAAoB,OACpBC,mBAAoB,6BACpBC,oBAAqB,YACrBC,sBAAuB,gBACvBC,MAAS,OACTC,OAAU,QACVC,MAAS,OACTC,SAAY,WACZC,IAAO,QAGIC,EAA0B,CACrCT,mBAAoB,OACpBC,mBAAoB,6BACpBC,oBAAqB,YACrBC,sBAAuB,gBACvBC,MAAS,OACTC,OAAU,QACVC,MAAS,OACTC,SAAY,WACZC,IAAO,SAGIE,EAAyB,CACpCV,mBAAoB,OACpBC,mBAAoB,6BACpBC,oBAAqB,YACrBC,sBAAuB,gBACvBC,MAAS,MACTC,OAAU,QACVC,MAAS,OACTC,SAAY,WACZC,IAAO,SAGIG,EAA0B,CACrCX,mBAAoB,OACpBC,mBAAoB,6BACpBC,oBAAqB,YACrBC,sBAAuB,gBACvBC,MAAS,MACTC,OAAU,QACVC,MAAS,OACTC,SAAY,WACZC,IAAO,QACPI,KAAQ,OC1BKC,0LAZX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,CAAsBxB,MAAOQ,EAAwBf,MAAOW,IAC5DrB,EAAAC,EAAAC,cAACuC,EAAD,CAAsBxB,MAAOkB,EAAyBzB,MAAOY,IAC7DtB,EAAAC,EAAAC,cAACuC,EAAD,CAAsBxB,MAAOmB,EAAwB1B,MAAOa,IAC5DvB,EAAAC,EAAAC,cAACuC,EAAD,CAAsBxB,MAAOoB,EAAyB3B,MAAOc,YATnDnB,cCKEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e462939d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.scss';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"site-header\">\n        <nav>\n          <a href='#'> <span> Roku App Kit </span> </a>\n          <a href='#'> <span> rMock </span> </a>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component, Fragment } from 'react'\nimport './featuredContentBlock.scss'\n\nclass FeaturedContentBlock extends Component{\n  render() {\n\n    let ctaLinks = this.props.model.cta.map( ( link ) => {\n      return ( <a href={ link.href } aria-label={ link.text }> { link.text } </a> )\n    })\n\n    return (\n      <Fragment>\n        <section className=\"featuredContentBlock\" style={this.props.style} >\n          <h2> { this.props.model.headline } </h2>\n          <h3> { this.props.model.subText } </h3>\n          <div class=\"cta\">\n            { ctaLinks }\n          </div>\n        </section>\n      </Fragment>\n    )\n  }\n}\n\nexport default FeaturedContentBlock\n","\nexport const appKitContentModel = {\n  headline: \"Build with Roku App Kit\",\n  subText: \"Robust, Scalable and Impeccable Design\",\n  cta: [{\n    href: \"#\",\n    text: \"Roku App Kit\"\n  }]\n}\n\nexport const rMockContentModel = {\n  headline: \"Make Unit Tests Simple\",\n  subText: \"Standalone Mock Library For Brightscript\",\n  cta: [{\n    href: \"https://tribalscale.github.io/rmock/\",\n    text: \"rMock\"\n  }]\n}\n\nexport const workContentModel = {\n  headline: \"Our Work\",\n  subText: \"Projects done by Our Team\",\n  cta: [{\n    href: \"#\",\n    text: \"Projects\"\n  }]\n}\n\nexport const teamContentModel = {\n  headline: \"Our Team\",\n  subText: \"Knowledge, Experience and Craft\",\n  cta: [{\n    href: \"#\",\n    text: \"Team\"\n  }]\n}\n","\n\nexport const firstContentBlockStyle = {\n  \"background-color\": \"#fff\",\n  \"background-image\": 'url(\"/assets/Roku_BG.png\")',\n  \"background-repeat\": \"no-repeat\",\n  \"background-position\": \"center bottom\",\n  \"width\": \"100%\",\n  \"height\": \"428px\",\n  \"color\": \"#000\",\n  \"position\": \"absolute\",\n  \"top\": \"48px\"\n}\n\nexport const secondContentBlockStyle = {\n  \"background-color\": \"#fff\",\n  \"background-image\": 'url(\"/assets/Roku_BG.png\")',\n  \"background-repeat\": \"no-repeat\",\n  \"background-position\": \"center bottom\",\n  \"width\": \"100%\",\n  \"height\": \"428px\",\n  \"color\": \"#000\",\n  \"position\": \"absolute\",\n  \"top\": \"488px\"\n}\n\nexport const thirdContentBlockStyle = {\n  \"background-color\": \"#fff\",\n  \"background-image\": 'url(\"/assets/Roku_BG.png\")',\n  \"background-repeat\": \"no-repeat\",\n  \"background-position\": \"center bottom\",\n  \"width\": \"49%\",\n  \"height\": \"428px\",\n  \"color\": \"#000\",\n  \"position\": \"absolute\",\n  \"top\": \"936px\"\n}\n\nexport const fourthContentBlockStyle = {\n  \"background-color\": \"#fff\",\n  \"background-image\": 'url(\"/assets/Roku_BG.png\")',\n  \"background-repeat\": \"no-repeat\",\n  \"background-position\": \"center bottom\",\n  \"width\": \"50%\",\n  \"height\": \"428px\",\n  \"color\": \"#000\",\n  \"position\": \"absolute\",\n  \"top\": \"936px\",\n  \"left\": \"50%\"\n}\n","import React, { Component } from 'react';\nimport Header from './components/header';\nimport FeaturedContentBlock from './components/featuredContentBlock'\nimport { appKitContentModel, rMockContentModel, workContentModel, teamContentModel } from './models/featuredContentModel'\nimport { firstContentBlockStyle, secondContentBlockStyle, thirdContentBlockStyle, fourthContentBlockStyle } from './styles/homePage.js'\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <FeaturedContentBlock style={firstContentBlockStyle} model={appKitContentModel} />\n        <FeaturedContentBlock style={secondContentBlockStyle} model={rMockContentModel} />\n        <FeaturedContentBlock style={thirdContentBlockStyle} model={workContentModel} />\n        <FeaturedContentBlock style={fourthContentBlockStyle} model={teamContentModel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}